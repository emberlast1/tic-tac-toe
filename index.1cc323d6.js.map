{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,E,O,A,S,C,E,G,M,O,C,G,O,C,E,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,C,G,E,M,G,G,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,E,E,I,E,E,I,A,W,M,A,U,6I,G,C,S,E,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,CCGA,IAAM,EAAA,WAAA,EAAN,e,EAAM,SAAA,KAAA,A,S,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,EAAA,IAAA,CAAA,GAEF,IAAI,CAAC,KAAK,CAAG,SAAS,gBAAgB,CAAC,SACvC,IAAI,CAAC,aAAa,CAAG,SAAS,aAAa,CAAC,mBAC5C,IAAI,CAAC,cAAc,CAAG,SAAS,aAAa,CAAC,yBAC7C,IAAI,CAAC,cAAc,CAAG,SAAS,aAAa,CAAC,yBAC7C,IAAI,CAAC,oBAAoB,CAAG,SAAS,aAAa,CAAC,qBACnD,IAAI,CAAC,sBAAsB,CAAG,SAAS,aAAa,CAAC,uBAErD,IAAI,CAAC,iBAAiB,CAAG,CACvB,KAAM,SAAS,aAAa,CAAC,mBAC7B,OAAQ,SAAS,aAAa,CAAC,qBAC/B,KAAM,SAAS,aAAa,CAAC,kBAC/B,EACA,IAAI,CAAC,cAAc,CAAG,SAAS,aAAa,CAAC,qBAC7C,IAAI,CAAC,cAAc,CAAG,SAAS,aAAa,CAAC,qBAC7C,IAAI,CAAC,YAAY,CAAG,SAAS,aAAa,CAAC,eAC3C,IAAI,CAAC,YAAY,CAAG,SAAS,aAAa,CAAC,eAC3C,IAAI,CAAC,sBAAsB,CAAG,SAAS,aAAa,CAAC,oBACrD,IAAI,CAAC,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable max-len */ \"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar Game = /*#__PURE__*/ function() {\n    function Game() {\n        _class_call_check(this, Game);\n        this.cells = document.querySelectorAll(\".cell\");\n        this.restartButton = document.querySelector(\".player_restart\");\n        this.player1Message = document.querySelector(\".win_message__player1\");\n        this.player2Message = document.querySelector(\".win_message__player2\");\n        this.playerVsPlayerButton = document.querySelector(\".player_vs_player\");\n        this.playerVsComputerButton = document.querySelector(\".player_vs_computer\");\n        this.difficultyButtons = {\n            easy: document.querySelector(\".difficult_easy\"),\n            medium: document.querySelector(\".difficult_medium\"),\n            hard: document.querySelector(\".difficult_hard\")\n        };\n        this.scorePlayer1El = document.querySelector(\".score-player_one\");\n        this.scorePlayer2El = document.querySelector(\".score-player_two\");\n        this.player1Panel = document.querySelector(\".player_one\");\n        this.player2Panel = document.querySelector(\".player_two\");\n        this.playerOrComputerNameEl = document.querySelector(\".player_computer\");\n        this.playerOrComputerMessageEl = document.querySelector(\".player_or_computer_message\");\n        this.gameTable = document.querySelector(\".game__table\");\n        this.gameState = {\n            board: Array(9).fill(null),\n            currentPlayer: \"X\",\n            scores: {\n                X: 0,\n                O: 0\n            },\n            gameMode: \"computer\",\n            difficulty: \"hard\",\n            isGameOver: false\n        };\n        this.winningCombinations = [\n            [\n                0,\n                1,\n                2\n            ],\n            [\n                3,\n                4,\n                5\n            ],\n            [\n                6,\n                7,\n                8\n            ],\n            [\n                0,\n                3,\n                6\n            ],\n            [\n                1,\n                4,\n                7\n            ],\n            [\n                2,\n                5,\n                8\n            ],\n            [\n                0,\n                4,\n                8\n            ],\n            [\n                2,\n                4,\n                6\n            ]\n        ];\n        this.init();\n    }\n    _create_class(Game, [\n        {\n            key: \"init\",\n            value: function init() {\n                var _this = this;\n                this.cells.forEach(function(cell) {\n                    cell.addEventListener(\"click\", function(e) {\n                        return _this.handleCellClick(e);\n                    });\n                });\n                this.restartButton.addEventListener(\"click\", function() {\n                    return _this.fullRestart();\n                });\n                this.playerVsPlayerButton.addEventListener(\"click\", function() {\n                    return _this.setGameMode(\"player\");\n                });\n                this.playerVsComputerButton.addEventListener(\"click\", function() {\n                    return _this.setGameMode(\"computer\");\n                });\n                this.difficultyButtons.easy.addEventListener(\"click\", function() {\n                    return _this.setDifficulty(\"easy\");\n                });\n                this.difficultyButtons.medium.addEventListener(\"click\", function() {\n                    return _this.setDifficulty(\"medium\");\n                });\n                this.difficultyButtons.hard.addEventListener(\"click\", function() {\n                    return _this.setDifficulty(\"hard\");\n                });\n                this.updateUI();\n            }\n        },\n        {\n            key: \"handleCellClick\",\n            value: function handleCellClick(event) {\n                var _this = this;\n                if (this.gameState.isGameOver) return;\n                var cell = event.currentTarget;\n                var index = parseInt(cell.dataset.index);\n                if (isNaN(index) || this.gameState.board[index] !== null) return;\n                this.makeMove(cell, index);\n                if (this.gameState.gameMode === \"computer\" && !this.gameState.isGameOver && this.gameState.currentPlayer === \"O\") {\n                    this.disableBoard();\n                    setTimeout(function() {\n                        return _this.computerMove();\n                    }, 1000);\n                }\n            }\n        },\n        {\n            key: \"makeMove\",\n            value: function makeMove(cell, index) {\n                this.gameState.board[index] = this.gameState.currentPlayer;\n                cell.innerHTML = this.gameState.currentPlayer === \"X\" ? \"&#10060;\" : \"&#11093;\";\n                cell.classList.add(this.gameState.currentPlayer === \"X\" ? \"cell-x\" : \"cell-o\");\n                if (this.checkEndCondition()) return;\n                this.switchPlayer();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"checkEndCondition\",\n            value: function checkEndCondition() {\n                var winnerInfo = this.checkWinner();\n                if (winnerInfo) {\n                    this.endGame(winnerInfo.winner, winnerInfo.combination);\n                    return true;\n                }\n                if (this.isDraw()) {\n                    this.endGame(null);\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"checkWinner\",\n            value: function checkWinner() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.winningCombinations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var combination = _step.value;\n                        var _combination = _sliced_to_array(combination, 3), a = _combination[0], b = _combination[1], c = _combination[2];\n                        if (this.gameState.board[a] && this.gameState.board[a] === this.gameState.board[b] && this.gameState.board[a] === this.gameState.board[c]) return {\n                            winner: this.gameState.board[a],\n                            combination: combination\n                        };\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return null;\n            }\n        },\n        {\n            key: \"isDraw\",\n            value: function isDraw() {\n                return this.gameState.board.every(function(cell) {\n                    return cell !== null;\n                });\n            }\n        },\n        {\n            key: \"endGame\",\n            value: function endGame(winner) {\n                var _this = this;\n                var winningCombination = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n                this.gameState.isGameOver = true;\n                this.disableBoard();\n                if (winner) {\n                    this.gameState.scores[winner]++;\n                    winningCombination.forEach(function(index) {\n                        return _this.cells[index].classList.add(\"cell-win\");\n                    });\n                } else this.cells.forEach(function(cell) {\n                    return cell.classList.add(\"cell-pat\");\n                });\n                this.updateUI();\n                if (this.gameState.scores.X === 5 || this.gameState.scores.O === 5) this.showFinalWinner();\n                else setTimeout(function() {\n                    return _this.roundRestart();\n                }, 2000);\n            }\n        },\n        {\n            key: \"showFinalWinner\",\n            value: function showFinalWinner() {\n                this.gameTable.style.display = \"none\";\n                if (this.gameState.scores.X === 5) this.player1Message.removeAttribute(\"hidden\");\n                else this.player2Message.removeAttribute(\"hidden\");\n            }\n        },\n        {\n            key: \"switchPlayer\",\n            value: function switchPlayer() {\n                this.gameState.currentPlayer = this.gameState.currentPlayer === \"X\" ? \"O\" : \"X\";\n            }\n        },\n        {\n            key: \"computerMove\",\n            value: function computerMove() {\n                if (this.gameState.isGameOver) return;\n                var moveIndex = -1;\n                var availableCells = this.getAvailableCells();\n                if (this.gameState.difficulty === \"hard\") {\n                    moveIndex = this.findWinningMove(\"O\");\n                    if (moveIndex === -1) moveIndex = this.findWinningMove(\"X\");\n                }\n                if (this.gameState.difficulty === \"medium\") {\n                    if (Math.random() > 0.5) {\n                        moveIndex = this.findWinningMove(\"O\");\n                        if (moveIndex === -1) moveIndex = this.findWinningMove(\"X\");\n                    }\n                }\n                if (moveIndex === -1) moveIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n                if (moveIndex !== undefined) {\n                    var cell = this.cells[moveIndex];\n                    this.makeMove(cell, moveIndex);\n                }\n                this.enableBoard();\n            }\n        },\n        {\n            key: \"findWinningMove\",\n            value: function findWinningMove(player) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.getAvailableCells()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var index = _step.value;\n                        var tempBoard = _to_consumable_array(this.gameState.board);\n                        tempBoard[index] = player;\n                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                        try {\n                            for(var _iterator1 = this.winningCombinations[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                var combination = _step1.value;\n                                var _combination = _sliced_to_array(combination, 3), a = _combination[0], b = _combination[1], c = _combination[2];\n                                if (tempBoard[a] === player && tempBoard[b] === player && tempBoard[c] === player) return index;\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return -1;\n            }\n        },\n        {\n            key: \"getAvailableCells\",\n            value: function getAvailableCells() {\n                return this.gameState.board.map(function(val, index) {\n                    return val === null ? index : null;\n                }).filter(function(val) {\n                    return val !== null;\n                });\n            }\n        },\n        {\n            key: \"roundRestart\",\n            value: function roundRestart() {\n                this.gameState.board.fill(null);\n                this.gameState.isGameOver = false;\n                this.gameState.currentPlayer = \"X\";\n                this.cells.forEach(function(cell) {\n                    cell.innerHTML = \"\";\n                    cell.classList.remove(\"cell-x\", \"cell-o\", \"cell-win\", \"cell-pat\");\n                });\n                this.enableBoard();\n                this.updateUI();\n            }\n        },\n        {\n            key: \"fullRestart\",\n            value: function fullRestart() {\n                this.roundRestart();\n                this.gameState.scores = {\n                    X: 0,\n                    O: 0\n                };\n                this.player1Message.setAttribute(\"hidden\", true);\n                this.player2Message.setAttribute(\"hidden\", true);\n                this.gameTable.style.display = \"flex\";\n                this.updateUI();\n            }\n        },\n        {\n            key: \"setGameMode\",\n            value: function setGameMode(mode) {\n                this.gameState.gameMode = mode;\n                this.fullRestart();\n                if (mode === \"player\") {\n                    this.playerVsPlayerButton.style.transform = \"scale(1.2)\";\n                    this.playerVsPlayerButton.style.backgroundColor = \"#2f6d2f\";\n                    this.playerVsComputerButton.style.transform = \"scale(1)\";\n                    this.playerVsComputerButton.style.backgroundColor = \"rgb(143, 31, 31)\";\n                    this.playerOrComputerNameEl.innerHTML = \"Player 2\";\n                    this.playerOrComputerMessageEl.innerHTML = \"Player 2 win!\";\n                } else {\n                    this.playerVsComputerButton.style.transform = \"scale(1.2)\";\n                    this.playerVsComputerButton.style.backgroundColor = \"#2f6d2f\";\n                    this.playerVsPlayerButton.style.transform = \"scale(1)\";\n                    this.playerVsPlayerButton.style.backgroundColor = \"rgb(143, 31, 31)\";\n                    this.playerOrComputerNameEl.innerHTML = \"Computer\";\n                    this.playerOrComputerMessageEl.innerHTML = \"Computer win!\";\n                }\n            }\n        },\n        {\n            key: \"setDifficulty\",\n            value: function setDifficulty(level) {\n                var _this = this;\n                this.gameState.difficulty = level;\n                Object.keys(this.difficultyButtons).forEach(function(key) {\n                    _this.difficultyButtons[key].classList.remove(\"difficult_active\");\n                });\n                this.difficultyButtons[level].classList.add(\"difficult_active\");\n            }\n        },\n        {\n            key: \"updateUI\",\n            value: function updateUI() {\n                this.scorePlayer1El.innerHTML = this.gameState.scores.X;\n                this.scorePlayer2El.innerHTML = this.gameState.scores.O;\n                if (!this.gameState.isGameOver) {\n                    if (this.gameState.currentPlayer === \"X\") {\n                        this.player1Panel.style.backgroundColor = \"green\";\n                        this.player1Panel.style.transform = \"scale(1.2)\";\n                        this.player2Panel.style.backgroundColor = \"rgb(143, 31, 31)\";\n                        this.player2Panel.style.transform = \"scale(1)\";\n                    } else {\n                        this.player2Panel.style.backgroundColor = \"green\";\n                        this.player2Panel.style.transform = \"scale(1.2)\";\n                        this.player1Panel.style.backgroundColor = \"rgb(143, 31, 31)\";\n                        this.player1Panel.style.transform = \"scale(1)\";\n                    }\n                }\n            }\n        },\n        {\n            key: \"disableBoard\",\n            value: function disableBoard() {\n                this.cells.forEach(function(cell) {\n                    cell.style.pointerEvents = \"none\";\n                });\n            }\n        },\n        {\n            key: \"enableBoard\",\n            value: function enableBoard() {\n                var _this = this;\n                this.cells.forEach(function(cell, index) {\n                    if (_this.gameState.board[index] === null) cell.style.pointerEvents = \"auto\";\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\ndocument.addEventListener(\"DOMContentLoaded\", new Game());\n\n//# sourceMappingURL=index.1cc323d6.js.map\n","/* eslint-disable max-len */\n'use strict';\n\nclass Game {\n  constructor() {\n    this.cells = document.querySelectorAll('.cell');\n    this.restartButton = document.querySelector('.player_restart');\n    this.player1Message = document.querySelector('.win_message__player1');\n    this.player2Message = document.querySelector('.win_message__player2');\n    this.playerVsPlayerButton = document.querySelector('.player_vs_player');\n    this.playerVsComputerButton = document.querySelector('.player_vs_computer');\n\n    this.difficultyButtons = {\n      easy: document.querySelector('.difficult_easy'),\n      medium: document.querySelector('.difficult_medium'),\n      hard: document.querySelector('.difficult_hard'),\n    };\n    this.scorePlayer1El = document.querySelector('.score-player_one');\n    this.scorePlayer2El = document.querySelector('.score-player_two');\n    this.player1Panel = document.querySelector('.player_one');\n    this.player2Panel = document.querySelector('.player_two');\n    this.playerOrComputerNameEl = document.querySelector('.player_computer');\n    this.playerOrComputerMessageEl = document.querySelector('.player_or_computer_message');\n    this.gameTable = document.querySelector('.game__table');\n\n    this.gameState = {\n      board: Array(9).fill(null),\n      currentPlayer: 'X',\n      scores: {\n        X: 0, O: 0,\n      },\n      gameMode: 'computer',\n      difficulty: 'hard',\n      isGameOver: false,\n    };\n\n    this.winningCombinations = [\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\n      [0, 4, 8], [2, 4, 6],\n    ];\n\n    this.init();\n  }\n\n  init() {\n    this.cells.forEach(cell => {\n      cell.addEventListener('click', (e) => this.handleCellClick(e));\n    });\n\n    this.restartButton.addEventListener('click', () => this.fullRestart());\n\n    this.playerVsPlayerButton.addEventListener('click', () => this.setGameMode('player'));\n    this.playerVsComputerButton.addEventListener('click', () => this.setGameMode('computer'));\n\n    this.difficultyButtons.easy.addEventListener('click', () => this.setDifficulty('easy'));\n    this.difficultyButtons.medium.addEventListener('click', () => this.setDifficulty('medium'));\n    this.difficultyButtons.hard.addEventListener('click', () => this.setDifficulty('hard'));\n\n    this.updateUI();\n  }\n\n  handleCellClick(event) {\n    if (this.gameState.isGameOver) {\n      return;\n    }\n\n    const cell = event.currentTarget;\n    const index = parseInt(cell.dataset.index);\n\n    if (isNaN(index) || this.gameState.board[index] !== null) {\n      return;\n    }\n\n    this.makeMove(cell, index);\n\n    if (this.gameState.gameMode === 'computer' && !this.gameState.isGameOver && this.gameState.currentPlayer === 'O') {\n      this.disableBoard();\n      setTimeout(() => this.computerMove(), 1000);\n    }\n  }\n\n  makeMove(cell, index) {\n    this.gameState.board[index] = this.gameState.currentPlayer;\n    cell.innerHTML = this.gameState.currentPlayer === 'X' ? '&#10060;' : '&#11093;';\n    cell.classList.add(this.gameState.currentPlayer === 'X' ? 'cell-x' : 'cell-o');\n\n    if (this.checkEndCondition()) {\n      return;\n    }\n\n    this.switchPlayer();\n    this.updateUI();\n  }\n\n  checkEndCondition() {\n    const winnerInfo = this.checkWinner();\n\n    if (winnerInfo) {\n      this.endGame(winnerInfo.winner, winnerInfo.combination);\n\n      return true;\n    }\n\n    if (this.isDraw()) {\n      this.endGame(null);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  checkWinner() {\n    for (const combination of this.winningCombinations) {\n      const [a, b, c] = combination;\n\n      if (this.gameState.board[a] && this.gameState.board[a] === this.gameState.board[b] && this.gameState.board[a] === this.gameState.board[c]) {\n        return {\n          winner: this.gameState.board[a], combination,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  isDraw() {\n    return this.gameState.board.every(cell => cell !== null);\n  }\n\n  endGame(winner, winningCombination = []) {\n    this.gameState.isGameOver = true;\n    this.disableBoard();\n\n    if (winner) {\n      this.gameState.scores[winner]++;\n      winningCombination.forEach(index => this.cells[index].classList.add('cell-win'));\n    } else {\n      this.cells.forEach(cell => cell.classList.add('cell-pat'));\n    }\n\n    this.updateUI();\n\n    if (this.gameState.scores.X === 5 || this.gameState.scores.O === 5) {\n      this.showFinalWinner();\n    } else {\n      setTimeout(() => this.roundRestart(), 2000);\n    }\n  }\n\n  showFinalWinner() {\n    this.gameTable.style.display = 'none';\n\n    if (this.gameState.scores.X === 5) {\n      this.player1Message.removeAttribute('hidden');\n    } else {\n      this.player2Message.removeAttribute('hidden');\n    }\n  }\n\n  switchPlayer() {\n    this.gameState.currentPlayer = this.gameState.currentPlayer === 'X' ? 'O' : 'X';\n  }\n\n  computerMove() {\n    if (this.gameState.isGameOver) {\n      return;\n    }\n\n    let moveIndex = -1;\n    const availableCells = this.getAvailableCells();\n\n    if (this.gameState.difficulty === 'hard') {\n      moveIndex = this.findWinningMove('O');\n\n      if (moveIndex === -1) {\n        moveIndex = this.findWinningMove('X');\n      }\n    }\n\n    if (this.gameState.difficulty === 'medium') {\n      if (Math.random() > 0.5) {\n        moveIndex = this.findWinningMove('O');\n\n        if (moveIndex === -1) {\n          moveIndex = this.findWinningMove('X');\n        }\n      }\n    }\n\n    if (moveIndex === -1) {\n      moveIndex = availableCells[Math.floor(Math.random() * availableCells.length)];\n    }\n\n    if (moveIndex !== undefined) {\n      const cell = this.cells[moveIndex];\n\n      this.makeMove(cell, moveIndex);\n    }\n\n    this.enableBoard();\n  }\n\n  findWinningMove(player) {\n    for (const index of this.getAvailableCells()) {\n      const tempBoard = [...this.gameState.board];\n\n      tempBoard[index] = player;\n\n      for (const combination of this.winningCombinations) {\n        const [a, b, c] = combination;\n\n        if (tempBoard[a] === player && tempBoard[b] === player && tempBoard[c] === player) {\n          return index;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  getAvailableCells() {\n    return this.gameState.board.map((val, index) => val === null ? index : null).filter(val => val !== null);\n  }\n\n  roundRestart() {\n    this.gameState.board.fill(null);\n    this.gameState.isGameOver = false;\n    this.gameState.currentPlayer = 'X';\n\n    this.cells.forEach(cell => {\n      cell.innerHTML = '';\n      cell.classList.remove('cell-x', 'cell-o', 'cell-win', 'cell-pat');\n    });\n\n    this.enableBoard();\n    this.updateUI();\n  }\n\n  fullRestart() {\n    this.roundRestart();\n\n    this.gameState.scores = {\n      X: 0, O: 0,\n    };\n    this.player1Message.setAttribute('hidden', true);\n    this.player2Message.setAttribute('hidden', true);\n    this.gameTable.style.display = 'flex';\n    this.updateUI();\n  }\n\n  setGameMode(mode) {\n    this.gameState.gameMode = mode;\n    this.fullRestart();\n\n    if (mode === 'player') {\n      this.playerVsPlayerButton.style.transform = 'scale(1.2)';\n      this.playerVsPlayerButton.style.backgroundColor = '#2f6d2f';\n      this.playerVsComputerButton.style.transform = 'scale(1)';\n      this.playerVsComputerButton.style.backgroundColor = 'rgb(143, 31, 31)';\n      this.playerOrComputerNameEl.innerHTML = 'Player 2';\n      this.playerOrComputerMessageEl.innerHTML = `Player 2 win!`;\n    } else {\n      this.playerVsComputerButton.style.transform = 'scale(1.2)';\n      this.playerVsComputerButton.style.backgroundColor = '#2f6d2f';\n      this.playerVsPlayerButton.style.transform = 'scale(1)';\n      this.playerVsPlayerButton.style.backgroundColor = 'rgb(143, 31, 31)';\n      this.playerOrComputerNameEl.innerHTML = 'Computer';\n      this.playerOrComputerMessageEl.innerHTML = 'Computer win!';\n    }\n  }\n\n  setDifficulty(level) {\n    this.gameState.difficulty = level;\n\n    Object.keys(this.difficultyButtons).forEach(key => {\n      this.difficultyButtons[key].classList.remove('difficult_active');\n    });\n    this.difficultyButtons[level].classList.add('difficult_active');\n  }\n\n  updateUI() {\n    this.scorePlayer1El.innerHTML = this.gameState.scores.X;\n    this.scorePlayer2El.innerHTML = this.gameState.scores.O;\n\n    if (!this.gameState.isGameOver) {\n      if (this.gameState.currentPlayer === 'X') {\n        this.player1Panel.style.backgroundColor = 'green';\n        this.player1Panel.style.transform = 'scale(1.2)';\n        this.player2Panel.style.backgroundColor = 'rgb(143, 31, 31)';\n        this.player2Panel.style.transform = 'scale(1)';\n      } else {\n        this.player2Panel.style.backgroundColor = 'green';\n        this.player2Panel.style.transform = 'scale(1.2)';\n        this.player1Panel.style.backgroundColor = 'rgb(143, 31, 31)';\n        this.player1Panel.style.transform = 'scale(1)';\n      }\n    }\n  }\n\n  disableBoard() {\n    this.cells.forEach(cell => {\n      cell.style.pointerEvents = 'none';\n    });\n  }\n\n  enableBoard() {\n    this.cells.forEach((cell, index) => {\n      if (this.gameState.board[index] === null) {\n        cell.style.pointerEvents = 'auto';\n      }\n    });\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', new Game());\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_sliced_to_array","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","_unsupported_iterable_to_array","_non_iterable_rest","TypeError","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","Game","protoProps","_class_call_check","instance","Constructor","cells","document","querySelectorAll","restartButton","querySelector","player1Message","player2Message","playerVsPlayerButton","playerVsComputerButton","difficultyButtons","easy","medium","hard","scorePlayer1El","scorePlayer2El","player1Panel","player2Panel","playerOrComputerNameEl","playerOrComputerMessageEl","gameTable","gameState","board","fill","currentPlayer","scores","X","O","gameMode","difficulty","isGameOver","winningCombinations","init","key","_this","forEach","cell","addEventListener","e","handleCellClick","fullRestart","setGameMode","setDifficulty","updateUI","event","currentTarget","index","parseInt","dataset","isNaN","makeMove","disableBoard","setTimeout","computerMove","innerHTML","classList","add","checkEndCondition","switchPlayer","winnerInfo","checkWinner","endGame","winner","combination","isDraw","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_combination","a","b","c","return","every","winningCombination","arguments","showFinalWinner","roundRestart","style","display","removeAttribute","moveIndex","availableCells","getAvailableCells","findWinningMove","Math","random","floor","enableBoard","player","tempBoard","_array_without_holes","_iterable_to_array","iter","_non_iterable_spread","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","map","val","filter","remove","setAttribute","mode","transform","backgroundColor","level","keys","pointerEvents","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty"],"version":3,"file":"index.1cc323d6.js.map"}